{"version":3,"sources":["components/Logo/Logo.js","components/TodosCount/TodosCount.js","apis/TodoAPI.js","env/env.js","components/WithTodosData/WithTodosData.js","MyRouter/MyRouter.js","components/Header/Header.js","components/Layout/Layout.js","components/TodoList/TodoItem/TodoItem.js","model/Todo.js","components/TodoList/TodoList.js","components/Dashboard/Dashboard.js","App.js","myRedux/myRedux.js","MyReactRedux/MyReactRedux.js","myRedux/ReduxCounterApp.js","hooks/HooksApp.js","index.js"],"names":["Logo","className","TodosCount","baseUrl","todoPath","props","todolist","length","env","todosPath","getAllTodos","fetch","join","then","res","json","addTodo","newTodo","method","body","JSON","stringify","headers","deleteTodo","id","WithTodosData","state","title","HandleAddTodo","data","setState","handleRemoveTodo","filter","todo","catch","err","console","warn","header","content","this","render","children","renderHeader","React","Component","MyRouteInstances","MyRoute","path","exact","component","locationPath","window","location","pathname","includes","pathMatch","createElement","log","unRegister","routeInstance","push","hanldePopstate","forceUpdate","addEventListener","instance","removeEventListener","routerRegister","MyLink","handleClicked","e","preventDefault","history","pushState","to","forEach","href","onClick","Header","handleChangeActivePage","_","__","Layout","TodoItem","removeTodo","Todo","userId","completed","TodoList","inputText","handleInputOnChange","event","target","value","handleInputKeyUp","key","type","placeholder","onChange","onKeyUp","map","Dashboard","totalTodosCount","totalCompleted","App","activePage","newActivePage","headerTitle","Home","About","actionCreater","increment","decrement","incrementDelay","dispatch","setTimeout","initialState","counter","reducerFn","subscribeListeners","undefined","getState","createStore","action","mapStateToProps","mapDispatchToProps","MyReduxContext","createContext","MyContext","ReduxCounterApp","handleIncreament","alert","hello","WrappedComponent","context","getPropsToConnectComponent","stateToProps","dispatchToProps","subscribe","unsubscribe","contextType","fetchCounterData","Promise","rej","WrappedComponenet","ClassAppp","isLoading","handleAdd","counterRef","current","ReactDOM","document","getElementById"],"mappings":"sXAOeA,G,YAJF,WACX,OAAO,yBAAKC,UAAU,QAAf,iB,MCGMC,ICLXC,EACAC,EDIWF,EALf,SAAoBG,GAAQ,IAClBC,EAAaD,EAAbC,SACR,OAAO,wCAAcA,EAASC,S,QEJnBC,EASL,CACJL,QAAS,wBACTM,UAAW,SDGXN,EAAUK,EAASL,QACnBC,EAAWI,EAASC,UAQjB,IAAMC,EAAc,kBACzBC,MAAM,CAACR,EAASC,GAAUQ,KAAK,MAAMC,MAAK,SAACC,GAAD,OAASA,EAAIC,WAE5CC,EAAU,SAACC,GAAD,OACrBN,MAAM,CAACR,EAASC,GAAUQ,KAAK,KAAM,CACnCM,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CACP,eAAgB,qCAEjBT,MAAK,SAACC,GAAD,OAASA,EAAIC,WAEVQ,EAAa,SAACC,GAAD,OACxBb,MAAM,CAACR,EAASC,EAAUoB,GAAIZ,KAAK,KAAM,CACvCM,OAAQ,WACPL,MAAK,SAACC,GAAD,OAASA,EAAIC,WE6BRU,E,4MA/DbC,MAAQ,CACNC,MAAO,WACPrB,SAAU,I,EAEZsB,cAAgB,SAACX,GACfD,EAAQC,GAASJ,MAAK,SAACgB,GACrB,EAAKC,SAAS,CACZxB,SAAS,CAAEuB,GAAH,mBAAY,EAAKH,MAAMpB,iB,EAKrCyB,iBAAmB,SAACP,GAClBD,EAAWC,GACRX,MAAK,SAACgB,GACL,EAAKC,SAAS,CACZxB,SAAU,EAAKoB,MAAMpB,SAAS0B,QAAO,SAACC,GAAD,OAAUA,EAAKT,KAAOA,UAG9DU,OAAM,SAACC,GACNC,QAAQC,KAAKF,O,kEAIE,IAAD,OAClBzB,IAAcG,MAAK,SAACgB,GAClB,EAAKC,SAAS,CACZxB,SAAUuB,S,+BAMd,IAAIS,EAAS,KACTC,EAAU,KAFP,EAGoCC,KAAKnC,MAAxCoC,EAHD,EAGCA,OAAQC,EAHT,EAGSA,SAAUC,EAHnB,EAGmBA,aAmB1B,OAlBIA,IACFL,EAASK,EAAaH,KAAKd,MAAMC,QAG/Bc,EACFF,EAAUE,EACRD,KAAKT,iBACLS,KAAKZ,cACLY,KAAKd,MAAMpB,UAEJoC,IACTH,EAAUG,EACRF,KAAKT,iBACLS,KAAKZ,cACLY,KAAKd,MAAMpB,WAKb,oCACGgC,EACAC,O,GA1DmBK,IAAMC,W,QCD5BC,EAAmB,GAiBzB,IAQaC,EAAb,uKACY,IAAD,EACsDP,KAAKnC,MAA1D2C,EADD,EACCA,KAAMN,EADP,EACOA,SADP,IACiBO,aADjB,SACgCC,EADhC,EACgCA,UAAWT,EAD3C,EAC2CA,OAClD,GAXc,SAACO,EAAMC,GACvB,IAAME,EAAeC,OAAOC,SAASC,SACrC,OAAIL,EACKE,IAAiBH,EAEnBG,EAAaI,SAASP,GAMvBQ,CAAUR,EAAMC,GAAQ,CAC1B,GAAIC,EACF,OAAON,IAAMa,cAAcP,EAAW,GAAI,MAE5C,GAAIT,EACF,OAAOA,IAET,GAAIC,EACF,OAAOA,EAIX,OAAO,OAfX,6CAmBIN,QAAQsB,IAAI,WACZlB,KAAKmB,eApBT,0CAwBInB,KAAKmB,WA/CT,SAAwBC,GACtBd,EAAiBe,KAAKD,GAEtB,IAAME,EAAiB,WACrBF,EAAcG,eAGhB,OADAX,OAAOY,iBAAiB,WAAYF,GAC7B,WACW,gCAAhBhB,EAAmBA,EAAiBd,QAClC,SAACiC,GAAD,OAAcA,IAAaL,KAE7BR,OAAOc,oBAAoBJ,IAoCTK,CAAe3B,UAxBrC,GAA6BI,IAAMC,WA4BtBuB,EAAb,4MACEC,cAAgB,SAACC,GACfA,EAAEC,iBACFnB,OAAOoB,QAAQC,UAAU,GAAI,GAAI,EAAKpE,MAAMqE,IAC5C5B,EAAiB6B,SAAQ,SAACV,GACxBA,EAASF,kBALf,uDASY,IAAD,EACkBvB,KAAKnC,MAAtBqE,EADD,EACCA,GAAIhC,EADL,EACKA,SACZ,OACE,uBAAGkC,KAAMF,EAAIG,QAASrC,KAAK6B,eACxB3B,OAbT,GAA4BE,IAAMC,WC3BnBiC,E,uKAlBwBtC,KAAKnC,MAAhC0E,uBACR,OACE,yBAAK9E,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAQyE,GAAG,cAAX,aACA,kBAAC,EAAD,CAAQA,GAAG,aAAX,YACA,kBAAC,EAAD,CAAQA,GAAG,SAAX,QACA,kBAAC,EAAD,CAAQA,GAAG,UAAX,UAEF,kBAAC,EAAD,MACG,SAACM,EAAGC,EAAI3E,GAAR,OAAqB,kBAAC,EAAD,CAAYA,SAAUA,Y,GAbjCsC,IAAMC,WCSZqC,G,6KAZH,IAAD,EACsC1C,KAAKnC,MAA1CqC,EADD,EACCA,SAAUqC,EADX,EACWA,uBAClB,OACE,oCACE,4BAAQ9E,UAAU,UAChB,kBAAC,EAAD,CAAQ8E,uBAAwBA,KAElC,0BAAM9E,UAAU,WAAWyC,Q,GARdE,IAAMC,Y,YCeZsC,MAhBf,SAAkB9E,GAAQ,IAChB4B,EAAqB5B,EAArB4B,KAAMmD,EAAe/E,EAAf+E,WACd,OACE,wBAAInF,UAAU,0BACZ,8BAAOgC,EAAKN,OACZ,4BACEH,GAAIS,EAAKT,GACTvB,UAAU,aACV4E,QAAS,kBAAMO,EAAWnD,EAAKT,MAHjC,OCRO6D,EACX,WAAYC,EAAQ3D,EAAO4D,EAAW/D,GAAK,oBACzCgB,KAAK8C,OAASA,EACd9C,KAAKhB,GAAKA,EACVgB,KAAKb,MAAQA,EACba,KAAK+C,UAAYA,GCiFNC,E,4MA9Eb9D,MAAQ,CACN+D,UAAW,I,EA8BbC,oBAAsB,SAACC,GACrB,EAAK7D,SAAS,CAAE2D,UAAWE,EAAMC,OAAOC,S,EAE1CC,iBAAmB,SAACH,GAClB,GAAkB,UAAdA,EAAMI,IAAiB,CACzB,IACMpE,EAAQ,EAAKD,MAAM+D,UAEnBxE,EAAU,IAAIoE,EAHN,EAGkB1D,GADd,IAGlBC,EAD0B,EAAKvB,MAAvBuB,eACMX,GACd,EAAKa,SAAS,CACZ2D,UAAW,O,uDAKP,IAAD,EACgCjD,KAAKnC,MAApCC,EADD,EACCA,SAAUyB,EADX,EACWA,iBAElB,OACE,6BAAS9B,UAAU,YACjB,4BAAQA,UAAU,oBAChB,wBAAIA,UAAU,WAAd,aAEF,2BACE+F,KAAK,OACL/F,UAAU,kBACVgG,YAAY,4BACZC,SAAU1D,KAAKkD,oBACfS,QAAS3D,KAAKsD,iBACdD,MAAOrD,KAAKd,MAAM+D,YAEpB,wBAAIxF,UAAU,qBACXK,EAAS8F,KAAI,SAACnE,GAAD,OACZ,kBAAC,EAAD,CACE8D,IAAK9D,EAAKT,GACVS,KAAMA,EACNmD,WAAY,kBAAMrD,EAAiBE,EAAKT,gB,GAtE/BoB,IAAMC,WCcdwD,E,uKAlBH,IACA/F,EAAakC,KAAKnC,MAAlBC,SACFgG,EAAkBhG,EAASC,OAC3BgG,EAAiBjG,EAAS0B,QAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAKsD,aACnDhF,OAEH,OACE,iCACE,gDAAsB+F,GACtB,+CAAqBC,Q,GAVL3D,IAAMC,W,QC+Ef2D,E,4MAtEb9E,MAAQ,CACN+E,WAAY,Y,EAGd1B,uBAAyB,SAAC2B,GACxB,EAAK5E,SAAS,CACZ2E,WAAYC,K,uDAMd,OAAQlE,KAAKd,MAAM+E,YACjB,IAAK,YAED,kBAAC,EAAD,CACE9D,aAAc,SAACgE,GAAD,OAAiB,gCAASA,IACxClE,OAAQ,SAAC2C,EAAYpE,EAASV,GAAtB,OACN,kBAAC,EAAD,CAAWA,SAAUA,OAI3B,MACF,IAAK,WAED,kBAAC,EAAD,MACG,SAAC8E,EAAYpE,EAASV,GAAtB,OACC,kBAAC,EAAD,CACEA,SAAUA,EACVyB,iBAAkBqD,EAClBxD,cAAeZ,OAU3B,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQ+D,uBAAwBvC,KAAKuC,wBACnC,kBAAC,EAAD,CAAS9B,OAAK,EAACD,KAAK,aAClB,kBAAC,EAAD,MACG,SAACoC,EAAYpE,EAASV,GAAtB,OACC,kBAAC,EAAD,CACEA,SAAUA,EACVyB,iBAAkBqD,EAClBxD,cAAeZ,QAKvB,kBAAC,EAAD,CAASiC,OAAK,EAACD,KAAK,cAClB,kBAAC,EAAD,CACEL,aAAc,SAACgE,GAAD,OAAiB,gCAASA,IACxClE,OAAQ,SAAC2C,EAAYpE,EAASV,GAAtB,OACN,kBAAC,EAAD,CAAWA,SAAUA,QAI3B,kBAAC,EAAD,CAAS2C,OAAK,EAACD,KAAK,QAAQE,UAAW0D,IACvC,kBAAC,EAAD,CAAS3D,OAAK,EAACD,KAAK,SAASP,OAAQ,kBAAM,kBAACoE,EAAD,e,GAhEnCjE,IAAMC,WAyExB,SAAS+D,IACP,OAAO,oCAGT,SAASC,IACP,OAAO,qC,iBC7CIC,G,MAAgB,CAC3BC,UArBgB,WAChB,MAAO,CACLf,KANc,cA0BhBgB,UAhBgB,WAChB,MAAO,CACLhB,KAXc,cA0BhBiB,eAXqB,WACrB,OAAO,SAACC,GACNC,YAAW,WACTD,EAASJ,EAAcC,eACtB,SAWDK,EAAe,CACnBC,QAAS,IACT1F,MAAO,YAgBW,SAAC2F,GACnB,IAAIC,EAAqB,GACrB7F,EAAQ4F,OAAUE,EAAW,CAAExB,KAAM,eACnCyB,EAAW,WACf,OAAO/F,GA8BQgG,EA/CnB,WAAuD,IAA/BhG,EAA8B,uDAAtB0F,EAAcO,EAAQ,uCACpD,OAAQA,EAAO3B,MACb,IAtCc,YAuCZ,OAAO,2BAAKtE,GAAZ,IAAmB2F,QAAS3F,EAAM2F,QAAU,IAC9C,IAvCc,YAwCZ,OAAO,2BAAK3F,GAAZ,IAAmB2F,QAAS3F,EAAM2F,QAAU,IAC9C,QACE,OAAO3F,MAMb,ICpCwBkG,EAAiBC,EA9B5BC,EAAiBlF,IAAMmF,cAAc,MCIrCC,GDFiBpF,IAAMC,UCEXD,IAAMmF,cAAc,KAEvCE,E,4MACJC,iBAAmB,WACjBC,MAAM,aACN,EAAK9H,MAAM0G,a,uDAIX3E,QAAQsB,IAAI,qBAAsBlB,KAAKnC,OADhC,IAECgH,EAAY7E,KAAKnC,MAAjBgH,QACR,OACE,6BACE,wCAAcA,GACd,4BAAQxC,QAASrC,KAAK0F,kBAAtB,kB,GAZsBtF,IAAMC,YDwBZ+E,ECPA,SAAClG,GACvB,MAAO,CACL2F,QAAS3F,EAAM2F,QACf1F,MAAOD,EAAMC,MACbyG,MAAO1G,EAAM0G,QDGwBP,ECCd,SAACX,GAC1B,MAAO,CACLH,UAAW,kBAAMG,EAASJ,EAAcC,gBDFnC,SAACsB,GAAsB,IAAD,IAC3B,OAAO,EAAP,oDACE,WAAYhI,EAAOiI,GAAU,IAAD,8BAC1B,cAAMjI,EAAOiI,IAIfC,2BAA6B,WAAO,IAAD,EACF,EAAKD,QAA5Bb,EADyB,EACzBA,SAAUP,EADe,EACfA,SACZsB,EAAeZ,EAAgBH,KAE/BgB,EAAkBZ,EAAmBX,GAE3C,OAAO,2BAAKsB,GAAiBC,IAT7B,EAAK/G,MAAQ,EAAK6G,6BAFQ,EAD9B,qDAgBI,OADAnG,QAAQsB,IAAIlB,KAAK8F,SAEf,kBAACD,EAAD,iBAAsB7F,KAAKd,MAAWc,KAAKnC,UAjBjD,0CAqBuB,IAAD,OACVqI,EAAclG,KAAK8F,QAAnBI,UACRlG,KAAKmG,YAAcD,GAAU,WAC3BtG,QAAQsB,IAAI,0BACZ,EAAK5B,SAAS,EAAKyG,mCAzBzB,6CA8BI/F,KAAKmG,kBA9BT,GAAkC/F,IAAMC,WAAxC,EAKS+F,YAAcd,EALvB,ICKwDG,IAE5D,uKAGI,OAAO,2CAHX,GAAoCrF,IAAMC,YACjC+F,YAAcZ,E,KCxCvB,SAASa,IACP,OAAO,IAAIC,SAAQ,SAAChI,EAAKiI,GACvB5B,YAAW,WACTrG,EAAI,OACH,QAuHP,IAAqBkI,EAmDfC,E,uKAMM,IAAD,EAC+CzG,KAAKnC,MAAnD6I,EADD,EACCA,UAAW7B,EADZ,EACYA,QAAS8B,EADrB,EACqBA,UAAWC,EADhC,EACgCA,WAEvC,OACE,6BAASnJ,UAAU,YACjB,wCACCiJ,EAAY,4CAAwB,wCAAc7B,GAEnD,4BAAQxC,QAASsE,GAAjB,WACA,4BACEtE,QAAS,WAEPsC,YAAW,WACTgB,MAAMiB,EAAWC,WAChB,OALP,sB,GAfgBzG,IAAMC,WAnDTmG,EAoGeC,EAnGPrG,IAAMC,UC3DnCyG,IAAS7G,OAAO,kBAAC,EAAD,MAAa8G,SAASC,eAAe,W","file":"static/js/main.fe4ac8e6.chunk.js","sourcesContent":["import React from 'react';\nimport './Logo.css';\n\nconst Logo = () => {\n  return <div className=\"logo\">TodoManager</div>;\n};\n\nexport default Logo;\n","import React from 'react';\n\nfunction TodosCount(props) {\n  const { todolist } = props;\n  return <span>Todos: {todolist.length}</span>;\n}\n\nexport default TodosCount;\n","import { env } from '../env/env';\n\nlet baseUrl;\nlet todoPath;\nswitch (process.env.REACT_APP_ENV) {\n  case 'dev':\n    baseUrl = env.dev.baseUrl;\n    todoPath = env.dev.todosPath;\n    break;\n  case 'test':\n    baseUrl = env.test.baseUrl;\n    todoPath = env.test.todosPath;\n    break;\n  case 'prod':\n    baseUrl = env.prod.baseUrl;\n    todoPath = env.prod.todosPath;\n    break;\n  default:\n    baseUrl = env.dev.baseUrl;\n    todoPath = env.dev.todosPath;\n    break;\n}\n\nexport const getAllTodos = () =>\n  fetch([baseUrl, todoPath].join('/')).then((res) => res.json());\n\nexport const addTodo = (newTodo) =>\n  fetch([baseUrl, todoPath].join('/'), {\n    method: 'POST',\n    body: JSON.stringify(newTodo),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  }).then((res) => res.json());\n\nexport const deleteTodo = (id) =>\n  fetch([baseUrl, todoPath, id].join('/'), {\n    method: 'DELETE',\n  }).then((res) => res.json());\n","export const env = {\n  dev: {\n    baseUrl: 'https://jsonplaceholder.typicode.com',\n    todosPath: 'todos',\n  },\n  test: {\n    baseUrl: 'http://localhost:3500',\n    todosPath: 'api/todos',\n  },\n  prod: {\n    baseUrl: 'http://localhost:5000',\n    todosPath: 'todos',\n  },\n};\n","import React from 'react';\nimport { getAllTodos, deleteTodo, addTodo } from '../../apis/TodoAPI';\n\nclass WithTodosData extends React.Component {\n  state = {\n    title: 'TodoData',\n    todolist: [],\n  };\n  HandleAddTodo = (newTodo) => {\n    addTodo(newTodo).then((data) => {\n      this.setState({\n        todolist: [data, ...this.state.todolist],\n      });\n    });\n  };\n\n  handleRemoveTodo = (id) => {\n    deleteTodo(id)\n      .then((data) => {\n        this.setState({\n          todolist: this.state.todolist.filter((todo) => todo.id !== id),\n        });\n      })\n      .catch((err) => {\n        console.warn(err);\n      });\n  };\n\n  componentDidMount() {\n    getAllTodos().then((data) => {\n      this.setState({\n        todolist: data,\n      });\n    });\n  }\n\n  render() {\n    let header = null;\n    let content = null;\n    const { render, children, renderHeader } = this.props;\n    if (renderHeader) {\n      header = renderHeader(this.state.title);\n    }\n\n    if (render) {\n      content = render(\n        this.handleRemoveTodo,\n        this.HandleAddTodo,\n        this.state.todolist\n      );\n    } else if (children) {\n      content = children(\n        this.handleRemoveTodo,\n        this.HandleAddTodo,\n        this.state.todolist\n      );\n    }\n\n    return (\n      <>\n        {header}\n        {content}\n      </>\n    );\n  }\n}\n\nexport default WithTodosData;\n","import React from 'react';\n\nconst MyRouteInstances = [];\n\nfunction routerRegister(routeInstance) {\n  MyRouteInstances.push(routeInstance);\n\n  const hanldePopstate = () => {\n    routeInstance.forceUpdate();\n  };\n  window.addEventListener('popstate', hanldePopstate);\n  return function unRegister() {\n    MyRouteInstances = MyRouteInstances.filter(\n      (instance) => instance !== routeInstance\n    );\n    window.removeEventListener(hanldePopstate);\n  };\n}\n\nconst pathMatch = (path, exact) => {\n  const locationPath = window.location.pathname;\n  if (exact) {\n    return locationPath === path;\n  }\n  return locationPath.includes(path);\n};\n\nexport class MyRoute extends React.Component {\n  render() {\n    const { path, children, exact = false, component, render } = this.props;\n    if (pathMatch(path, exact)) {\n      if (component) {\n        return React.createElement(component, {}, null);\n      }\n      if (render) {\n        return render();\n      }\n      if (children) {\n        return children;\n      }\n    }\n\n    return null;\n  }\n\n  componentWillUnmount() {\n    console.log('unmount');\n    this.unRegister();\n  }\n\n  componentDidMount() {\n    this.unRegister = routerRegister(this);\n  }\n}\n\nexport class MyLink extends React.Component {\n  handleClicked = (e) => {\n    e.preventDefault();\n    window.history.pushState({}, '', this.props.to);\n    MyRouteInstances.forEach((instance) => {\n      instance.forceUpdate();\n    });\n  };\n\n  render() {\n    const { to, children } = this.props;\n    return (\n      <a href={to} onClick={this.handleClicked}>\n        {children}\n      </a>\n    );\n  }\n}\n","import React from 'react';\nimport Logo from '../Logo/Logo';\nimport './Header.css';\nimport TodosCount from '../TodosCount/TodosCount';\nimport WithTodosData from '../WithTodosData/WithTodosData';\nimport { Link } from 'react-router-dom';\nimport { MyLink } from '../../MyRouter/MyRouter';\n\nclass Header extends React.Component {\n  render() {\n    const { handleChangeActivePage } = this.props;\n    return (\n      <div className=\"header-list\">\n        <Logo></Logo>\n        <nav className=\"nav\">\n          <MyLink to=\"/dashboard\">Dashboard</MyLink>\n          <MyLink to=\"/todolist\">TodoList</MyLink>\n          <MyLink to=\"/home\">HOME</MyLink>\n          <MyLink to=\"/about\">About</MyLink>\n        </nav>\n        <WithTodosData>\n          {(_, __, todolist) => <TodosCount todolist={todolist}></TodosCount>}\n        </WithTodosData>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport Header from '../Header/Header';\nimport './Layout.css';\n\nclass Layout extends React.Component {\n  render() {\n    const { children, handleChangeActivePage } = this.props;\n    return (\n      <>\n        <header className=\"header\">\n          <Header handleChangeActivePage={handleChangeActivePage}></Header>\n        </header>\n        <main className=\"content\">{children}</main>\n      </>\n    );\n  }\n}\nexport default Layout;\n","import React from 'react';\nimport './TodoItem.css';\n\nfunction TodoItem(props) {\n  const { todo, removeTodo } = props;\n  return (\n    <li className=\"todolist__content-item\">\n      <span>{todo.title}</span>\n      <button\n        id={todo.id}\n        className=\"btn-remove\"\n        onClick={() => removeTodo(todo.id)}\n      >\n        X\n      </button>\n    </li>\n  );\n}\n\nexport default TodoItem;\n","export class Todo {\n  constructor(userId, title, completed, id) {\n    this.userId = userId;\n    this.id = id;\n    this.title = title;\n    this.completed = completed;\n  }\n}\n","import React from 'react';\nimport './TodoList.css';\nimport TodoItem from './TodoItem/TodoItem';\nimport { getAllTodos, deleteTodo, addTodo } from '../../apis/TodoAPI';\nimport { Todo } from '../../model/Todo';\nimport { withTodos } from '../../hoc/withTodos';\n\nclass TodoList extends React.Component {\n  state = {\n    inputText: '',\n  };\n\n  // handleRemoveTodo = (id) => {\n  //   // deleteTodo(id)\n  //   //   .then((data) => {\n  //   //     this.setState({\n  //   //       todolist: this.state.todolist.filter((todo) => todo.id !== id),\n  //   //     });\n  //   //   })\n  //   //   .catch((err) => {\n  //   //     console.warn(err);\n  //   //   });\n  // };\n\n  // handlerRemove = (event) => {\n  //   // event delegation\n  //   if (event.target.className === 'btn-remove') {\n  //     const id = event.target.id;\n  //     deleteTodo(+id)\n  //       .then((data) => {\n  //         this.setState({\n  //           todolist: this.state.todolist.filter((todo) => +todo.id !== +id),\n  //         });\n  //       })\n  //       .catch((err) => {\n  //         console.warn(err);\n  //       });\n  //   }\n  // };\n  handleInputOnChange = (event) => {\n    this.setState({ inputText: event.target.value });\n  };\n  handleInputKeyUp = (event) => {\n    if (event.key === 'Enter') {\n      const useId = 1;\n      const title = this.state.inputText;\n      const completed = false;\n      const newTodo = new Todo(useId, title, completed);\n      const { HandleAddTodo } = this.props;\n      HandleAddTodo(newTodo);\n      this.setState({\n        inputText: '',\n      });\n    }\n  };\n\n  render() {\n    const { todolist, handleRemoveTodo } = this.props;\n\n    return (\n      <section className=\"todolist\">\n        <header className=\"todolist__header\">\n          <h4 className=\"heading\">TodoList</h4>\n        </header>\n        <input\n          type=\"text\"\n          className=\"todolist__input\"\n          placeholder=\"What are you going to do?\"\n          onChange={this.handleInputOnChange}\n          onKeyUp={this.handleInputKeyUp}\n          value={this.state.inputText}\n        />\n        <ul className=\"todolist__content\">\n          {todolist.map((todo) => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              removeTodo={() => handleRemoveTodo(todo.id)}\n            ></TodoItem>\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default TodoList;\n\n// export default conncent(withTodos(withAuth(withUser(TodoList))));\n","import React from 'react';\n\nclass Dashboard extends React.Component {\n  render() {\n    const { todolist } = this.props;\n    const totalTodosCount = todolist.length;\n    const totalCompleted = todolist.filter((todo) => todo.completed === true)\n      .length;\n\n    return (\n      <section>\n        <h1> TotalTodosCount:{totalTodosCount}</h1>\n        <h1> TotalCompleted:{totalCompleted}</h1>\n      </section>\n    );\n  }\n}\n\n// const NewDashboard = withTodos(Dashboard);\n// console.log(NewDashboard);\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport TodoList from './components/TodoList/TodoList';\nimport Dashborad from './components/Dashboard/Dashboard';\nimport { withTodos } from './hoc/withTodos';\nimport WidthTodoData from './components/WithTodosData/WithTodosData';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport { MyRoute } from './MyRouter/MyRouter';\n\nclass App extends React.Component {\n  state = {\n    activePage: 'TodoList',\n  };\n\n  handleChangeActivePage = (newActivePage) => {\n    this.setState({\n      activePage: newActivePage,\n    });\n  };\n\n  render() {\n    let content = null;\n    switch (this.state.activePage) {\n      case 'Dashboard':\n        content = (\n          <WidthTodoData\n            renderHeader={(headerTitle) => <header>{headerTitle}</header>}\n            render={(removeTodo, addTodo, todolist) => (\n              <Dashborad todolist={todolist}></Dashborad>\n            )}\n          ></WidthTodoData>\n        );\n        break;\n      case 'TodoList':\n        content = (\n          <WidthTodoData>\n            {(removeTodo, addTodo, todolist) => (\n              <TodoList\n                todolist={todolist}\n                handleRemoveTodo={removeTodo}\n                HandleAddTodo={addTodo}\n              ></TodoList>\n            )}\n          </WidthTodoData>\n        );\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <BrowserRouter>\n        <Layout handleChangeActivePage={this.handleChangeActivePage}>\n          <MyRoute exact path=\"/todolist\">\n            <WidthTodoData>\n              {(removeTodo, addTodo, todolist) => (\n                <TodoList\n                  todolist={todolist}\n                  handleRemoveTodo={removeTodo}\n                  HandleAddTodo={addTodo}\n                ></TodoList>\n              )}\n            </WidthTodoData>\n          </MyRoute>\n          <MyRoute exact path=\"/dashboard\">\n            <WidthTodoData\n              renderHeader={(headerTitle) => <header>{headerTitle}</header>}\n              render={(removeTodo, addTodo, todolist) => (\n                <Dashborad todolist={todolist}></Dashborad>\n              )}\n            ></WidthTodoData>\n          </MyRoute>\n          <MyRoute exact path=\"/home\" component={Home}></MyRoute>\n          <MyRoute exact path=\"/about\" render={() => <About></About>}></MyRoute>\n        </Layout>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n\nfunction Home() {\n  return <h1>HOME</h1>;\n}\n\nfunction About() {\n  return <h1>About</h1>;\n}\n","// import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n// const { createStore } = require('redux');\n\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\n// action: Obj has the type property\n// actionType:\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\n// actionCreator:\nconst increment = () => {\n  return {\n    type: INCREMENT,\n  };\n};\n\nconst decrement = () => {\n  return {\n    type: DECREMENT,\n  };\n};\n\nconst incrementDelay = () => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(actionCreater.increment());\n    }, 1000);\n  };\n};\n\nexport const actionCreater = {\n  increment,\n  decrement,\n  incrementDelay,\n};\n\n// reducer | pure function : no side effect , same input same output, data imutable\nconst initialState = {\n  counter: 100,\n  title: 'Counter',\n};\n\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state, counter: state.counter + 1 };\n    case DECREMENT:\n      return { ...state, counter: state.counter - 1 };\n    default:\n      return state;\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nconst createStore = (reducerFn) => {\n  let subscribeListeners = [];\n  let state = reducerFn(undefined, { type: '___INIT___' });\n  const getState = () => {\n    return state;\n  };\n  const dispatch = (action) => {\n    if (typeof action === 'function') {\n      console.log(action);\n      action(dispatch, getState);\n    } else {\n      state = reducerFn(state, action);\n      subscribeListeners.forEach((listenerFn) => {\n        listenerFn();\n      });\n    }\n    console.log('dispatch, newState:', state);\n  };\n  const subscribe = (listenerFn) => {\n    subscribeListeners.push(listenerFn);\n    console.log('subscribeListeners', subscribeListeners);\n\n    return () => {\n      subscribeListeners.splice(subscribeListeners.indexOf(listenerFn), 1);\n      console.log('unsubscribe', subscribeListeners);\n    };\n  };\n  return {\n    getState,\n    dispatch,\n    subscribe,\n  };\n};\n// console.log(applyMiddleware);\nexport let store = createStore(counterReducer);\n// export let store = createStore(counterReducer, applyMiddleware(thunk));\n// console.log('store:', store);\n// console.log('store.getState:', store.getState());\n\n// // You can use subscribe() to update the UI in response to state changes.\n// // Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// // However it can also be handy to persist the current state in the localStorage.\n\n// store.subscribe(() => console.log('subscribe', store.getState()));\n\n// // The only way to mutate the internal state is to dispatch an action.\n// // The actions can be serialized, logged or stored and later replayed.\n// store.dispatch(actionCreater.increment());\n// console.log('store.getState:', store.getState());\n// // // 1\n// store.dispatch(actionCreater.increment());\n// // // 2\n// store.dispatch(actionCreater.decrement());\n// // //1;\n","import React from 'react';\n\nexport const MyReduxContext = React.createContext(null);\n\nexport class Provider extends React.Component {\n  render() {\n    const { children, store } = this.props;\n\n    return (\n      <MyReduxContext.Provider value={store}>\n        {children}\n      </MyReduxContext.Provider>\n    );\n  }\n}\n\n// const mapDispatchToProps = (dispatch /*, ownProps*/) => {\n//     return {\n//       increment: () => dispatch(actionCreater.increment()),\n//     };\n//   };\n\n// const mapStateToProps = (state /*, ownProps*/) => {\n//     return {\n//       counter: state.counter,\n//       title: state.title,\n//       hello: state.hello,\n//     };\n//   };\n\n//export default connect(mapStateToProps, null)(ReduxCounterApp);\n\nexport const connect = (mapStateToProps, mapDispatchToProps) => {\n  return (WrappedComponent) => {\n    return class NewComponent extends React.Component {\n      constructor(props, context) {\n        super(props, context);\n        this.state = this.getPropsToConnectComponent();\n      }\n      static contextType = MyReduxContext;\n      getPropsToConnectComponent = () => {\n        const { getState, dispatch } = this.context;\n        const stateToProps = mapStateToProps(getState());\n\n        const dispatchToProps = mapDispatchToProps(dispatch);\n\n        return { ...stateToProps, ...dispatchToProps };\n      };\n      render() {\n        console.log(this.context);\n        return (\n          <WrappedComponent {...this.state} {...this.props}></WrappedComponent>\n        );\n      }\n\n      componentDidMount() {\n        const { subscribe } = this.context;\n        this.unsubscribe = subscribe(() => {\n          console.log('subscribe from connect');\n          this.setState(this.getPropsToConnectComponent());\n        });\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe();\n      }\n    };\n  };\n};\n","import React from 'react';\nimport { store } from './myRedux';\nimport { actionCreater } from './myRedux';\n// import { connect } from 'react-redux';\nimport { connect } from '../MyReactRedux/MyReactRedux';\n\nexport const MyContext = React.createContext('');\n\nclass ReduxCounterApp extends React.Component {\n  handleIncreament = () => {\n    alert('CHANGE!!!');\n    this.props.increment();\n  };\n\n  render() {\n    console.log('props from connect', this.props);\n    const { counter } = this.props;\n    return (\n      <div>\n        <h1>Counter: {counter}</h1>\n        <button onClick={this.handleIncreament}>increment</button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    counter: state.counter,\n    title: state.title,\n    hello: state.hello,\n  };\n};\n\nconst mapDispatchToProps = (dispatch /*, ownProps*/) => {\n  return {\n    increment: () => dispatch(actionCreater.increment()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxCounterApp);\n\nexport class TestCounterApp extends React.Component {\n  static contextType = MyContext;\n  render() {\n    return <h1>TestAPp</h1>;\n  }\n}\n","import React, { useEffect, useState, useRef } from 'react';\n\nfunction fetchCounterData() {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      res(100);\n    }, 2000);\n  });\n}\n\nfunction NewCounter() {\n  const [counter] = useCounter();\n\n  return <h1>Count: {counter}</h1>;\n}\nexport const NewCounterApp = NewCounter;\n\nfunction useCounter(initialCounterState = 0, initialLoading = false) {\n  const [counter, setCounter] = useState(initialCounterState);\n  const [isLoading, setIsLoading] = useState(initialLoading);\n  const counterRef = useRef(counter);\n  counterRef.current = counter;\n  useEffect(() => {\n    // console.log('useEffect for mount');\n    setIsLoading(true);\n    fetchCounterData()\n      .then((data) => {\n        setIsLoading(false);\n        setCounter(data);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n      });\n  }, []);\n  return [counter, setCounter, isLoading, counterRef];\n}\n\nfunction HooksAppp() {\n  //   const result = useState(0);\n  //   const counter = result[0];\n  //   const setCounter = result[1];\n  //   const [counter, setCounter] = useState(0);\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const mountRef = useRef(false);\n\n  //   const [counterObj, setCounterObj] = useState({\n  //     counter: 0,\n  //     isLoading: false,\n  //   });\n\n  //   console.log('counter', counter);\n  //   let counterRef = useRef(counter);\n  //   counterRef.current = counter;\n  //   console.log('ref', counterRef);\n\n  // didMount | didUpdate\n  //   useEffect(() => {\n  //     // console.log('useEffect for mount');\n  //     setIsLoading(true);\n  //     fetchCounterData()\n  //       .then((data) => {\n  //         setIsLoading(false);\n  //         setCounter(data);\n  //       })\n  //       .catch((err) => {\n  //         setIsLoading(false);\n  //       });\n  //   }, []);\n\n  //   useEffect(() => {\n  //     if (mountRef.current) {\n  //       console.log('useEffect for update');\n  //     } else {\n  //       mountRef.current = true;\n  //     }\n  //   });\n\n  const [counter, setCounter, isLoading, counterRef] = useCounter(0, false);\n  return (\n    <section className=\"hooksApp\">\n      <h1>HooksApp</h1>\n      {isLoading ? <h5>isLoading...</h5> : <h5>Counter: {counter}</h5>}\n\n      <button\n        onClick={() => {\n          setCounter(counter + 1);\n        }}\n      >\n        Add One\n      </button>\n      <button\n        onClick={() => {\n          setTimeout(() => {\n            alert(counterRef.current);\n          }, 3000);\n        }}\n      >\n        aletOne in 3S\n      </button>\n    </section>\n  );\n}\n\nfunction HooksAppTest(props) {\n  const { isLoading, counter, handleAdd, counterRef } = props;\n  return (\n    <section className=\"classApp\">\n      <h1>ClassApp</h1>\n      {isLoading ? <h5>isLoading...</h5> : <h5>Counter: {counter}</h5>}\n\n      <button onClick={handleAdd}>Add One</button>\n      <button\n        onClick={() => {\n          //const clickState = counter;\n          setTimeout(() => {\n            alert(counterRef.current);\n          }, 3000);\n        }}\n      >\n        aletOne in 3S\n      </button>\n    </section>\n  );\n}\n\nconst withCounter = (WrappedComponenet) =>\n  class NewComponent extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        isLoading: false,\n        counter: 0,\n      };\n      this.counterRef = {\n        current: 0,\n      };\n    }\n\n    handleAdd = () => {\n      this.setState({\n        counter: this.state.counter + 1,\n      });\n\n      this.counterRef.current = this.state.counter + 1;\n    };\n\n    render() {\n      return (\n        <WrappedComponenet\n          {...this.props}\n          {...this.state}\n          counterRef={this.counterRef}\n          handleAdd={this.handleAdd}\n        ></WrappedComponenet>\n      );\n    }\n\n    componentDidMount() {\n      // console.log(document.querySelector('section.classApp'));\n      this.setState({\n        isLoading: true,\n      });\n      fetchCounterData()\n        .then((data) => {\n          this.setState({\n            counter: data,\n            isLoading: false,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            isLoading: false,\n          });\n        });\n    }\n  };\nclass ClassAppp extends React.Component {\n  //   state = {\n  //     counter: 0,\n  //     isLoading: false,\n  //   };\n\n  render() {\n    const { isLoading, counter, handleAdd, counterRef } = this.props;\n\n    return (\n      <section className=\"classApp\">\n        <h1>ClassApp</h1>\n        {isLoading ? <h5>isLoading...</h5> : <h5>Counter: {counter}</h5>}\n\n        <button onClick={handleAdd}>Add One</button>\n        <button\n          onClick={() => {\n            //const clickState = counter;\n            setTimeout(() => {\n              alert(counterRef.current);\n            }, 3000);\n          }}\n        >\n          aletOne in 3S\n        </button>\n      </section>\n    );\n  }\n  //   componentDidMount() {\n  //     // console.log(document.querySelector('section.classApp'));\n  //     this.setState({\n  //       isLoading: true,\n  //     });\n  //     fetchCounterData()\n  //       .then((data) => {\n  //         // console.log(data);\n  //         this.setState({\n  //           counter: data,\n  //           isLoading: false,\n  //         });\n  //       })\n  //       .catch((err) => {\n  //         this.setState({\n  //           isLoading: false,\n  //         });\n  //       });\n  //   }\n}\n\nexport const ClassApp = withCounter(ClassAppp);\n//export const HooksApp = withCounter(HooksAppTest);\nexport const HooksApp = HooksAppp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport ReduxCounterApp, {\n  TestCounterApp,\n  MyContext,\n} from './myRedux/ReduxCounterApp';\n// import { Provider } from 'react-redux';\nimport { Provider } from './MyReactRedux/MyReactRedux';\n\nimport { store } from './myRedux/myRedux';\nimport { HooksApp, ClassApp, NewCounterApp } from './hooks/HooksApp';\n\nimport WithTodosData from './components/WithTodosData/WithTodosData';\n\nfunction Title(props) {\n  return <h1>{props.title}</h1>;\n}\n\nfunction Title2(props) {\n  return <h4>{props.title}</h4>;\n}\n// class RenderPropsTest extends React.Component {\n//   render() {\n//     return (\n//       <WithTodosData\n//         render={(title) => <Title2 title={title}></Title2>}\n//       ></WithTodosData>\n//     );\n//   }\n// }\n\n// class Myapp extends React.Component {\n//   state = {\n//     remove: false,\n//   };\n\n//   render() {\n//     return (\n//       <Provider store={store}>\n//         <ReduxCounterApp name=\"patrick\" />\n//         {this.state.remove ? null : <ReduxCounterApp />}\n//         <button\n//           onClick={() => {\n//             this.setState({\n//               remove: true,\n//             });\n//           }}\n//         >\n//           Remove Second Counter\n//         </button>\n//       </Provider>\n//     );\n//   }\n// }\n\nconst HooksTest = (\n  <div>\n    <HooksApp></HooksApp>\n    <hr></hr>\n    <ClassApp></ClassApp>\n    <hr></hr>\n    <NewCounterApp></NewCounterApp>\n  </div>\n);\n\nReactDOM.render(<App></App>, document.getElementById('root'));\n"],"sourceRoot":""}